// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://swagger.io/terms/",
        "contact": {
            "name": "Team Georepublic",
            "email": "info@georepublic.de"
        },
        "license": {
            "name": "GNU Affero General Public License",
            "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/breaks/{break_id}": {
            "get": {
                "description": "Fetch a break with its break_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Break"
                ],
                "summary": "Fetch a break",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Break ID",
                        "name": "break_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Break"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a break with its break_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Break"
                ],
                "summary": "Delete a break",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Break ID",
                        "name": "break_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a break with its break_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Break"
                ],
                "summary": "Update a break",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Break ID",
                        "name": "break_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update break",
                        "name": "Break",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateBreakParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Break"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/jobs/{job_id}": {
            "get": {
                "description": "Fetch a job with its job_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Fetch a job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Job"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a job with its job_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Delete a job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a job (partial update) with its job_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Update a job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Job object",
                        "name": "Job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UpdateJobParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Job"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/jobs/{job_id}/schedule": {
            "get": {
                "description": "Get the schedule for a job using job_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/calendar",
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Get the schedule for a job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/util.ScheduleDataTask"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "Get a list of projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "List projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Project"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new project with the input payload\nThe \"distance_calc\" parameter must be either \"euclidean\", \"valhalla\" or \"osrm\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Create project",
                        "name": "Project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateProjectParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}": {
            "get": {
                "description": "Fetch a project with its project_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Fetch a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a project with its project_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a project with its project_id\nThe \"distance_calc\" parameter must be either \"euclidean\", \"valhalla\" or \"osrm\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Project"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update project",
                        "name": "Project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateProjectParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Project"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}/jobs": {
            "get": {
                "description": "Get a list of jobs for a project with project_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "List jobs for a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Job"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new job with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job"
                ],
                "summary": "Create a new job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Job object",
                        "name": "Job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateJobParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Job"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}/schedule": {
            "get": {
                "description": "Get the schedule for a project.\n\n**For JSON content type**: When overview = true, only the metadata is returned. Default value is false, which also returns the summary object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/calendar",
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Get the schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Overview",
                        "name": "overview",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/util.ScheduleData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "post": {
                "description": "Schedule the tasks present in a project, deleting any previous schedule and return the new schedule.\n\nWhen fresh = true, the old schedule is ignored and a fresh schedule is created. Otherwise, the old schedule of each task is altered such that it remains in the \"max_shift\" interval. Default value is false.\n**For JSON content type**: When overview = true, only the metadata is returned. Default value is false, which also returns the summary object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Schedule the tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Fresh",
                        "name": "fresh",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Overview",
                        "name": "overview",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/util.ScheduleData"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the schedule for a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedule"
                ],
                "summary": "Delete the schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}/shipments": {
            "get": {
                "description": "Get a list of shipments for a project with project_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shipment"
                ],
                "summary": "List shipments for a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Shipment"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new shipment with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shipment"
                ],
                "summary": "Create a new shipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create shipment",
                        "name": "Shipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateShipmentParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Shipment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{project_id}/vehicles": {
            "get": {
                "description": "Get a list of vehicles for a project with project_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "List vehicles for a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Vehicle"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new vehicle with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Create a new vehicle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create vehicle",
                        "name": "Vehicle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateVehicleParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Vehicle"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shipments/{shipment_id}": {
            "get": {
                "description": "Fetch a shipment with its shipment_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shipment"
                ],
                "summary": "Fetch a shipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shipment ID",
                        "name": "shipment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Shipment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a shipment with its shipment_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shipment"
                ],
                "summary": "Delete a shipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shipment ID",
                        "name": "shipment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a shipment with its shipment_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shipment"
                ],
                "summary": "Update a shipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shipment ID",
                        "name": "shipment_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update shipment",
                        "name": "Shipment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UpdateShipmentParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Shipment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/shipments/{shipment_id}/schedule": {
            "get": {
                "description": "Get the schedule for a shipment using shipment_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/calendar",
                    "application/json"
                ],
                "tags": [
                    "Shipment"
                ],
                "summary": "Get the schedule for a shipment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Shipment ID",
                        "name": "shipment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/util.ScheduleDataTask"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/vehicles/{vehicle_id}": {
            "get": {
                "description": "Fetch a vehicle with its vehicle_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Fetch a vehicle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vehicle ID",
                        "name": "vehicle_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Vehicle"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a vehicle with its vehicle_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Delete a vehicle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vehicle ID",
                        "name": "vehicle_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/util.Success"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a vehicle with its vehicle_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Update a vehicle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vehicle ID",
                        "name": "vehicle_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update vehicle",
                        "name": "Vehicle",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.UpdateVehicleParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Vehicle"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        },
        "/vehicles/{vehicle_id}/breaks": {
            "get": {
                "description": "Get a list of breaks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Break"
                ],
                "summary": "List breaks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vehicle ID",
                        "name": "vehicle_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Break"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new break with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Break"
                ],
                "summary": "Create a new break",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vehicle ID",
                        "name": "vehicle_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create break",
                        "name": "Break",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CreateBreakParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Break"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/vehicles/{vehicle_id}/schedule": {
            "get": {
                "description": "Get the schedule for a vehicle using vehicle_id\n\n**For JSON content type**: When overview = true, only the metadata is returned. Default value is false, which also returns the summary object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/calendar",
                    "application/json"
                ],
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get the schedule for a vehicle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Vehicle ID",
                        "name": "vehicle_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Overview",
                        "name": "overview",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/util.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/util.ScheduleDB"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/util.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/util.NotFound"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Break": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "vehicle_id": {
                    "type": "string",
                    "example": "1234567812345678"
                }
            }
        },
        "database.CreateBreakParams": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "database.CreateJobParams": {
            "type": "object",
            "required": [
                "location"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "delivery": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        10,
                        20
                    ]
                },
                "location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "pickup": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        15
                    ]
                },
                "priority": {
                    "type": "integer",
                    "example": 10
                },
                "service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "database.CreateProjectParams": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "distance_calc": {
                    "type": "string",
                    "example": "euclidean"
                },
                "max_shift": {
                    "type": "string",
                    "example": "00:30:00"
                },
                "name": {
                    "type": "string",
                    "example": "Sample Project"
                }
            }
        },
        "database.CreateShipmentParams": {
            "type": "object",
            "required": [
                "d_location",
                "p_location"
            ],
            "properties": {
                "amount": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        15
                    ]
                },
                "d_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "d_service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "d_setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "d_time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "p_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "p_service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "p_setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "p_time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "example": 10
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                }
            }
        },
        "database.CreateVehicleParams": {
            "type": "object",
            "required": [
                "end_location",
                "start_location"
            ],
            "properties": {
                "capacity": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        50,
                        25
                    ]
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "end_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "max_tasks": {
                    "type": "integer",
                    "example": 20
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "speed_factor": {
                    "type": "number",
                    "example": 1
                },
                "start_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "tw_close": {
                    "type": "string",
                    "example": "2021-12-31T23:59:00"
                },
                "tw_open": {
                    "type": "string",
                    "example": "2021-12-31T23:00:00"
                }
            }
        },
        "database.Job": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "delivery": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        10,
                        20
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "pickup": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        15
                    ]
                },
                "priority": {
                    "type": "integer",
                    "example": 10
                },
                "project_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                }
            }
        },
        "database.Project": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "distance_calc": {
                    "type": "string",
                    "example": "euclidean"
                },
                "id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "max_shift": {
                    "type": "string",
                    "example": "00:30:00"
                },
                "name": {
                    "type": "string",
                    "example": "Sample Project"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                }
            }
        },
        "database.Shipment": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        15
                    ]
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "d_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "d_service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "d_setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "d_time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "p_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "p_service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "p_setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "p_time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "example": 10
                },
                "project_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                }
            }
        },
        "database.UpdateJobParams": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "delivery": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        10,
                        20
                    ]
                },
                "location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "pickup": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        15
                    ]
                },
                "priority": {
                    "type": "integer",
                    "example": 10
                },
                "service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "database.UpdateShipmentParams": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        5,
                        15
                    ]
                },
                "d_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "d_service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "d_setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "d_time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "p_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "p_service": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "p_setup": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "p_time_windows": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "example": 10
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                }
            }
        },
        "database.UpdateVehicleParams": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        50,
                        25
                    ]
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "end_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "max_tasks": {
                    "type": "integer",
                    "example": 20
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "speed_factor": {
                    "type": "number",
                    "example": 1
                },
                "start_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "tw_close": {
                    "type": "string",
                    "example": "2021-12-31T23:59:00"
                },
                "tw_open": {
                    "type": "string",
                    "example": "2021-12-31T23:00:00"
                }
            }
        },
        "database.Vehicle": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        50,
                        25
                    ]
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "end_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "max_tasks": {
                    "type": "integer",
                    "example": 20
                },
                "project_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        5
                    ]
                },
                "speed_factor": {
                    "type": "number",
                    "example": 1
                },
                "start_location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "tw_close": {
                    "type": "string",
                    "example": "2021-12-31T23:59:00"
                },
                "tw_open": {
                    "type": "string",
                    "example": "2021-12-31T23:00:00"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                }
            }
        },
        "util.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "400"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Error message1",
                        "Error message2"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "util.LocationParams": {
            "type": "object",
            "required": [
                "latitude",
                "longitude"
            ],
            "properties": {
                "latitude": {
                    "type": "number",
                    "example": 2.0365
                },
                "longitude": {
                    "type": "number",
                    "example": 48.6113
                }
            }
        },
        "util.MetadataResponse": {
            "type": "object",
            "properties": {
                "summary": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.ScheduleSummary"
                    }
                },
                "total_service": {
                    "type": "string",
                    "example": "00:10:00"
                },
                "total_setup": {
                    "type": "string",
                    "example": "00:05:00"
                },
                "total_travel": {
                    "type": "string",
                    "example": "01:00:00"
                },
                "total_waiting": {
                    "type": "string",
                    "example": "00:30:00"
                },
                "unassigned": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.ScheduleUnassigned"
                    }
                }
            }
        },
        "util.NotFound": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "404"
                },
                "error": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "util.ScheduleDB": {
            "type": "object",
            "properties": {
                "arrival": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "departure": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "load": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        0,
                        0
                    ]
                },
                "location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "project_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "service_time": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "setup_time": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "task_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "task_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "travel_time": {
                    "type": "string",
                    "example": "00:16:40"
                },
                "type": {
                    "type": "string",
                    "example": "job"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "vehicle_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "vehicle_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "waiting_time": {
                    "type": "string",
                    "example": "00:00:00"
                }
            }
        },
        "util.ScheduleData": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/util.MetadataResponse"
                },
                "project_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.ScheduleResponse"
                    }
                }
            }
        },
        "util.ScheduleDataTask": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.ScheduleResponse"
                    }
                }
            }
        },
        "util.ScheduleResponse": {
            "type": "object",
            "properties": {
                "route": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/util.ScheduleRoute"
                    }
                },
                "vehicle_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "vehicle_id": {
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "util.ScheduleRoute": {
            "type": "object",
            "properties": {
                "arrival": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "created_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "departure": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "load": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        0,
                        0
                    ]
                },
                "location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "service_time": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "setup_time": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "task_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "task_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "travel_time": {
                    "type": "string",
                    "example": "00:16:40"
                },
                "type": {
                    "type": "string",
                    "example": "job"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2021-12-01T13:00:00"
                },
                "waiting_time": {
                    "type": "string",
                    "example": "00:00:00"
                }
            }
        },
        "util.ScheduleSummary": {
            "type": "object",
            "properties": {
                "service_time": {
                    "type": "string",
                    "example": "00:02:00"
                },
                "setup_time": {
                    "type": "string",
                    "example": "00:00:00"
                },
                "travel_time": {
                    "type": "string",
                    "example": "00:16:40"
                },
                "vehicle_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "vehicle_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "waiting_time": {
                    "type": "string",
                    "example": "00:00:00"
                }
            }
        },
        "util.ScheduleUnassigned": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/util.LocationParams"
                },
                "task_data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "key1": "value1",
                        "key2": "value2"
                    }
                },
                "task_id": {
                    "type": "string",
                    "example": "1234567812345678"
                },
                "type": {
                    "type": "string",
                    "example": "job"
                }
            }
        },
        "util.Success": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "200"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "util.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "200"
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "OK"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0",
	Host:        "localhost:9100",
	BasePath:    "/",
	Schemes:     []string{"http", "https"},
	Title:       "pg_scheduleserv API",
	Description: "This is an API for scheduling VRP tasks. Source code can be found on https://github.com/Georepublic/pg_scheduleserv",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
